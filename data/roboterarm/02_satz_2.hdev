<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="24.11.1.0">
<procedure name="main">
<interface/>
<body>
<l>NumTeachPoses := 10</l>
<c></c>
<l>dev_update_off ()</l>
<l>dev_close_window ()</l>
<l>dev_open_window_fit_size (0, 0, 900, 500, 1000, 1000, WindowHandle)</l>
<l>set_display_font (WindowHandle, 18, 'mono', 'true', 'false')</l>
<c></c>
<c>* Connect to robot</c>
<l>RobotIP := '172.22.147.23'</l>
<l>MVTecURProgram := 'MVTecSocketCommMoveLBlended.urp'</l>
<l>ur_init_robot_control (RobotIP, MVTecURProgram, AcceptingSocket, MVRobotSocket)</l>
<c></c>
<c>* Set robot poses and save them as tuple</c>
<l>read_tuple('teached_tool_in_base_poses_soll.tpl', B_Ps_T_basis_soll)</l>
<l>B_P_T_basis_soll := B_Ps_T_basis_soll[0*7:0*7+6]</l>
<l>ur_mvsocket_move(MVRobotSocket, B_P_T_basis_soll,'moveJ')</l>
<c></c>
<l>measuring := true</l>
<l>B_Ps_T := []</l>
<l>B_Ps_T_basis := []</l>
<l>PosesNames := []</l>
<l>PoseIter := 0</l>
<l>for PoseIter := 0 to NumTeachPoses-1 by 1</l>
<l>    dev_clear_window ()</l>
<l>    disp_message (WindowHandle, 'Move to Pose '+(PoseIter+1)+' of '+NumTeachPoses, 'window', 12, 12, 'black', 'true')</l>
<l>    ur_mvsocket_set_teach_mode (MVRobotSocket, 'on')</l>
<l>    while (1)</l>
<l>        disp_message (WindowHandle, 'Move to Pose '+(PoseIter+1)+' of '+NumTeachPoses, 'window', 12, 12, 'black', 'true')</l>
<l>        Button := 0</l>
<l>        try</l>
<l>            get_mposition (WindowHandle, Row, Column, Button)</l>
<l>        catch (Exception)</l>
<l>        endtry</l>
<l>        if (Button == 1)</l>
<l>            break</l>
<l>        endif</l>
<l>    endwhile</l>
<l>    dev_clear_window ()</l>
<l>    ur_mvsocket_set_teach_mode (MVRobotSocket, 'off')</l>
<l>    wait_seconds (1)</l>
<l>        ur_mvsocket_get_pose(MVRobotSocket, B_P_T)</l>
<l>    B_Ps_T := [B_Ps_T, B_P_T]</l>
<l>    write_tuple (B_P_T, 'teached_tool_in_base_pose_'+PoseIter$'02'+'.tpl')</l>
<l>    ur_mvsocket_move(MVRobotSocket, B_P_T_basis_soll,'moveJ')</l>
<l>    ur_mvsocket_get_pose(MVRobotSocket, B_P_T_basis)</l>
<l>    wait_seconds (1)</l>
<l>    B_Ps_T_basis := [B_Ps_T_basis, B_P_T_basis]</l>
<l>    write_tuple (B_P_T_basis, 'teached_tool_in_base_pose_basis_'+PoseIter$'02'+'.tpl')</l>
<l>    disp_message (WindowHandle, 'Saved Pose '+(PoseIter+1)+' of '+NumTeachPoses, 'window', 12, 12, 'black', 'true')</l>
<l>    wait_seconds (1)</l>
<c>    </c>
<l>*         try</l>
<l>*             get_mposition (WindowHandle, Row, Column, Button)</l>
<l>*         catch (Exception)</l>
<l>*         endtry</l>
<l>*         if (Button == 8)</l>
<l>*             measuring := false</l>
<l>*         endif</l>
<l>*     endwhile</l>
<l>*     ur_mvsocket_move(MVRobotSocket, B_P_T_basis,'moveJ')</l>
<l>endfor</l>
<l>close_socket (AcceptingSocket)</l>
<l>close_socket (MVRobotSocket)</l>
<l>write_tuple (B_Ps_T, 'teached_tool_in_base_poses.tpl')</l>
<c></c>
<l>* read_tuple('teached_tool_in_base_poses_soll.tpl', B_Ps_T_soll)</l>
<l>* ur_mvsocket_move(MVRobotSocket, B_Ps_T_soll,'moveJ')</l>
<l>* close_socket (AcceptingSocket)</l>
<l>* close_socket (MVRobotSocket)</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
